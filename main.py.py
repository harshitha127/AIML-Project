# -*- coding: utf-8 -*-
"""AIML Project Output.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CXM2QxmdNXCMmHUXJlcyhBdRJMZYioNz
"""

import pandas as pd
from google.colab import drive
!pip install pyxlsb
import os

from google.colab import drive
drive.mount('/content/drive')
# Mount Google Drive to access files


# Specify the path to the file in Google Drive
file_path = '/content/drive/MyDrive/Goodreads_BestBooksEver_DATASET.csv'
print("File exists:", os.path.exists(file_path))
df = pd.read_csv(file_path)


# Load the dataset
try:
    df = pd.read_excel(file_path, engine='pyxlsb')
    print(f"File '{file_path}' successfully loaded.")
except FileNotFoundError:
    print("File not found. Please check the file path.")
except Exception as e:
    print(f"An error occurred while loading the file: {e}")

# Clean the 'bookGenres' and 'bookAuthors' for case insensitivity
df['bookGenres'] = df['bookGenres'].apply(lambda x: x.split('|')[0].strip().lower() if isinstance(x, str) else 'unknown')
df['bookAuthors'] = df['bookAuthors'].str.lower()

# Convert 'bookPages', 'ratingCount', and 'bookRating' columns to numeric
df['bookPages'] = pd.to_numeric(df['bookPages'], errors='coerce')
df['ratingCount'] = pd.to_numeric(df['ratingCount'], errors='coerce')
df['bookRating'] = pd.to_numeric(df['bookRating'], errors='coerce')

# Replace NaN values in bookPages to indicate missing info
df['bookPages'] = df['bookPages'].fillna(0)

def recommend_books(df, book_authors=None, rating_count=None, book_genres=None, num_recommendations=5):
    recommendations = df

    # Filter by author (case-insensitive)
    if book_authors:
        author_query = book_authors.lower().strip()
        recommendations = recommendations[recommendations['bookAuthors'].str.contains(author_query, na=False)]

    # Filter by rating range (within 0.5 points of the specified rating)
    if rating_count:
        min_rating = max(rating_count - 0.5, 0)  # Lower bound for rating range
        recommendations = recommendations[(recommendations['bookRating'] >= min_rating) & (recommendations['bookRating'] <= rating_count + 0.5)]

    # Filter by genre (case-insensitive)
    if book_genres:
        genre_query = book_genres.lower().strip()
        recommendations = recommendations[recommendations['bookGenres'].str.contains(genre_query, na=False)]

    # Reset index to avoid alignment issues
    recommendations = recommendations.reset_index(drop=True)

    # Sort recommendations by rating in descending order
    recommendations = recommendations.sort_values(by='bookRating', ascending=False)

    # Check if any recommendations are found and display
    if not recommendations.empty:
        top_books = recommendations[['bookTitle', 'bookAuthors', 'bookPages', 'bookRating', 'bookGenres']].head(num_recommendations)
        print("Top Book Recommendations Based on Your Preferences:")
        for idx, book in top_books.iterrows():
            book_pages = int(book['bookPages']) if pd.notna(book['bookPages']) and book['bookPages'] > 0 else "Unknown"
            print(f"\nTitle: {book['bookTitle']}\n"
                  f"Author(s): {book['bookAuthors']}\n"
                  f"Pages: {book_pages}\n"
                  f"Rating: {book['bookRating']}\n"
                  f"Genre: {book['bookGenres']}\n")
        return "Happy reading!"
    else:
        return "No recommendations found matching all your preferences. Try expanding your criteria."

# Get user input for author, rating, genre, and number of recommendations
print("Welcome to the Book Recommendation System!")
user_author = input("Enter author name (or leave blank if no preference): ").strip()
user_author = user_author if user_author else None

try:
    user_rating_count = float(input("Enter minimum rating (or leave blank if no preference): ") or "0")
    user_rating_count = user_rating_count if user_rating_count > 0 else None
except ValueError:
    user_rating_count = None

user_genre = input("Enter genre (e.g., Fantasy, Romance, Thriller, Fiction, Science-Fiction, Young Adult, Classics, Historical, Childrens, Literature, Novels) or leave blank if no preference: ").strip()
user_genre = user_genre.lower() if user_genre else None

try:
    num_recommendations = int(input("Enter the number of books you'd like to be recommended: ") or "5")
    num_recommendations = max(1, num_recommendations)  # Ensure at least 1 recommendation
except ValueError:
    num_recommendations = 5

# Call the recommendation function and display results
recommendation_result = recommend_books(df, book_authors=user_author, rating_count=user_rating_count, book_genres=user_genre, num_recommendations=num_recommendations)
print(recommendation_result)